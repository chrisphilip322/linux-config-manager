#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

cd $(git root)
if [[ -f "tox.ini" ]]
then
    printf "Running tox... "
    if tox > /dev/null 2>&1
    then
        echo "success"
        exit 0
    elif [[ "$FORCE_PUSH" == "1" ]]
    then
        echo "tox failed but pushing anyways because FORCE_PUSH=1" >&2
        exit 0
    else
        echo "tox failed, blocking push. You can push anyways by setting the envvar FORCE_PUSH=1" 2>&1
        exit 1
    fi
fi
